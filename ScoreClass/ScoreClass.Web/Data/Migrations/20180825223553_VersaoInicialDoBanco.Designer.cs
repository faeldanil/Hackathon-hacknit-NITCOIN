// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ScoreClass.Web.Data;
using ScoreClass.Web.Models.Cadastros;
using ScoreClass.Web.Models.Incentivos;
using System;

namespace ScoreClass.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180825223553_VersaoInicialDoBanco")]
    partial class VersaoInicialDoBanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Aluno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailDescricao");

                    b.Property<string>("Nome");

                    b.Property<long?>("ReponsavelId");

                    b.Property<string>("Telefone");

                    b.HasKey("Id");

                    b.HasIndex("EmailDescricao");

                    b.HasIndex("ReponsavelId");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Email", b =>
                {
                    b.Property<string>("Descricao")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Descricao");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Escola", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Escola");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Frequencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Compareceu");

                    b.Property<DateTime>("DataHora");

                    b.Property<long?>("MateriaId");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.ToTable("Frequencia");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Materia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AlunoId");

                    b.Property<long?>("MatriculaId");

                    b.Property<string>("Nome");

                    b.Property<long?>("ProfessorId");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Materia");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Matricula", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AlunoId");

                    b.Property<string>("Codigo");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.ToTable("Matricula");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Nota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<long?>("MateriaId");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Ocorrencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataHora");

                    b.Property<string>("Descricao");

                    b.Property<int>("TipoComportamento");

                    b.HasKey("Id");

                    b.ToTable("Ocorrencia");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Pontualidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataHoraEntrada");

                    b.Property<DateTime>("DataHoraSaida");

                    b.Property<long?>("MatriculaId");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.ToTable("Pontualidade");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Professor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Responsavel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf");

                    b.Property<string>("EmailDescricao");

                    b.Property<string>("Nome");

                    b.Property<string>("Telefone");

                    b.HasKey("Id");

                    b.HasIndex("EmailDescricao");

                    b.ToTable("Responsavel");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Turma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("EscolaId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("Turma");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.Fidelidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<DateTime>("FimVigencia");

                    b.Property<DateTime>("InicioVigencia");

                    b.Property<long?>("ParceriaId");

                    b.Property<int>("TaxaConversao");

                    b.Property<int>("TempoVigenciaEmDias");

                    b.Property<int>("TipoValor");

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("ParceriaId");

                    b.ToTable("Fidelidade");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.NitCoin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<int>("Quantidade");

                    b.Property<DateTime>("Registro");

                    b.Property<long?>("ResponsavelId");

                    b.Property<long?>("VoucherId");

                    b.HasKey("Id");

                    b.HasIndex("ResponsavelId");

                    b.HasIndex("VoucherId");

                    b.ToTable("NitCoin");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.Parceria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Parceria");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.Voucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<long?>("FidelidadeId");

                    b.Property<int>("Quantidade");

                    b.Property<DateTime?>("Resgatado");

                    b.Property<long?>("ResponsavelId");

                    b.Property<long?>("ResponsavelId1");

                    b.Property<int>("TipoValor");

                    b.Property<DateTime>("Validade");

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("FidelidadeId");

                    b.HasIndex("ResponsavelId");

                    b.HasIndex("ResponsavelId1");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ScoreClass.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Aluno", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailDescricao");

                    b.HasOne("ScoreClass.Web.Models.Cadastros.Responsavel", "Reponsavel")
                        .WithMany()
                        .HasForeignKey("ReponsavelId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Frequencia", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Materia", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId");

                    b.HasOne("ScoreClass.Web.Models.Cadastros.Matricula")
                        .WithMany("Materias")
                        .HasForeignKey("MatriculaId");

                    b.HasOne("ScoreClass.Web.Models.Cadastros.Professor")
                        .WithMany("Materias")
                        .HasForeignKey("ProfessorId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Matricula", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Nota", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Materia", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Pontualidade", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Matricula", "Matricula")
                        .WithMany("Pontualidades")
                        .HasForeignKey("MatriculaId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Responsavel", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailDescricao");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Cadastros.Turma", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Escola", "Escola")
                        .WithMany("Turmas")
                        .HasForeignKey("EscolaId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.Fidelidade", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Incentivos.Parceria", "Parceria")
                        .WithMany("Programas")
                        .HasForeignKey("ParceriaId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.NitCoin", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Cadastros.Responsavel", "Responsavel")
                        .WithMany("NitCoins")
                        .HasForeignKey("ResponsavelId");

                    b.HasOne("ScoreClass.Web.Models.Incentivos.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");
                });

            modelBuilder.Entity("ScoreClass.Web.Models.Incentivos.Voucher", b =>
                {
                    b.HasOne("ScoreClass.Web.Models.Incentivos.Fidelidade", "Fidelidade")
                        .WithMany()
                        .HasForeignKey("FidelidadeId");

                    b.HasOne("ScoreClass.Web.Models.Cadastros.Responsavel")
                        .WithMany("Vouchers")
                        .HasForeignKey("ResponsavelId");

                    b.HasOne("ScoreClass.Web.Models.Cadastros.Responsavel")
                        .WithMany("VouchersAtivos")
                        .HasForeignKey("ResponsavelId1");
                });
#pragma warning restore 612, 618
        }
    }
}
